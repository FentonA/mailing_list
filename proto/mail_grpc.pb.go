// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailinglistClient is the client API for Mailinglist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailinglistClient interface {
	CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	GetEmailBatch(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type mailinglistClient struct {
	cc grpc.ClientConnInterface
}

func NewMailinglistClient(cc grpc.ClientConnInterface) MailinglistClient {
	return &mailinglistClient{cc}
}

func (c *mailinglistClient) CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailinglist/CreateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailinglistClient) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailinglist/GetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailinglistClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailinglist/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailinglistClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailinglist/DeleteEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailinglistClient) GetEmailBatch(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailinglist/GetEmailBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailinglistServer is the server API for Mailinglist service.
// All implementations must embed UnimplementedMailinglistServer
// for forward compatibility
type MailinglistServer interface {
	CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error)
	GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error)
	DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error)
	GetEmailBatch(context.Context, *GetEmailBatchRequest) (*EmailResponse, error)
	mustEmbedUnimplementedMailinglistServer()
}

// UnimplementedMailinglistServer must be embedded to have forward compatible implementations.
type UnimplementedMailinglistServer struct {
}

func (UnimplementedMailinglistServer) CreateEmail(context.Context, *CreateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmail not implemented")
}
func (UnimplementedMailinglistServer) GetEmail(context.Context, *GetEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmail not implemented")
}
func (UnimplementedMailinglistServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedMailinglistServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedMailinglistServer) GetEmailBatch(context.Context, *GetEmailBatchRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailBatch not implemented")
}
func (UnimplementedMailinglistServer) mustEmbedUnimplementedMailinglistServer() {}

// UnsafeMailinglistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailinglistServer will
// result in compilation errors.
type UnsafeMailinglistServer interface {
	mustEmbedUnimplementedMailinglistServer()
}

func RegisterMailinglistServer(s grpc.ServiceRegistrar, srv MailinglistServer) {
	s.RegisterService(&Mailinglist_ServiceDesc, srv)
}

func _Mailinglist_CreateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailinglistServer).CreateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailinglist/CreateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailinglistServer).CreateEmail(ctx, req.(*CreateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailinglist_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailinglistServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailinglist/GetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailinglistServer).GetEmail(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailinglist_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailinglistServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailinglist/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailinglistServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailinglist_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailinglistServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailinglist/DeleteEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailinglistServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailinglist_GetEmailBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailinglistServer).GetEmailBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailinglist/GetEmailBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailinglistServer).GetEmailBatch(ctx, req.(*GetEmailBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailinglist_ServiceDesc is the grpc.ServiceDesc for Mailinglist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailinglist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mailinglist",
	HandlerType: (*MailinglistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmail",
			Handler:    _Mailinglist_CreateEmail_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _Mailinglist_GetEmail_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Mailinglist_UpdateEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _Mailinglist_DeleteEmail_Handler,
		},
		{
			MethodName: "GetEmailBatch",
			Handler:    _Mailinglist_GetEmailBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mail.proto",
}
